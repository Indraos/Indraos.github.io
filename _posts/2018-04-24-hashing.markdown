---
layout: post
title:  "Grundlagen Kryptographie"
date:   2018-03-11 00:26:05 +0100
categories: teach
---
## Hashing
**Ziele**
 - Ihr könnt definieren, was ein Hash-Algorithmus ist und Beispiele geben
 - Ihr könnt in einer Modul-Dokumentation nachlesen. 
 - Ihr könnt in C# einen Hash eines Dateinhaltes berechnen

**Ablauf**
 - Reaktivierung
 - Einstieg: Anwendungen von Hashing
 - Erarbeitung: Plakat von Hash-Algorithmen
 - Übung: Ausprobieren in C#
 - Implementierung eines eigenen einfachen Hash-Algorithmus
<!--more-->
### Anwendungen
Hashing bedeutet, eine Verschlüsselte Version von Daten abzulegen, die man gar nicht entschlüsseln möchte. Hashing hat hauptsächlich zwei Anwendungsbereiche: 

1. Integritätscheck (ist mein Download richtig?)
2. Prüfung von Passwörtern (ich kann Passwörter nicht im Klartext in einer Datenbank ablegen. 

> Google: Wie mache ich in Linux einen Integritäts-Check mit Berechnung einer MD5-Checksumme.[^Checksumme soll hier nichts anderes bedeuten als Hashwert]

### Ein einfacher Hash-Algorithmus
Ein Beispiel für einen Hash-Algorithmus ist der folgende: Wir wählen eine große Zahl $x$. Um einen Hash eines Werts $y$ zu bekommen, nehmen wir die beiden Zahlen mal und geben das Ergebnis zurück. Diese Operation ist schnell, aber schwer zu invertieren. 

> Implementiere den obigen Hash-Algorithmus als Funktion `string -> byte[]`. Benutze immer Blöcke von 32 Bit Länge.

### Liste von Hashing-Algorithmen
Hierfür gibt es verschiedene Hashing-Algorithmen. MD5 ist ein schwacher, stärker sind die SHAXXX-Algorithmen, wobei XXX eine dreistellige Zahl ist. Wollen wir einen Hash berechnen, so können wir das wie folgt machen:

```cs
byte[] data = Encoding.UTF8.GetBytes("stRhong%pword");
byte[] hash = SHA256.Create().ComputeHash(data);
Console.WriteLine(Encoding.UTF8.GetString(hash));
```

> Probiere den obigen Code aus. Ändere den Hash-Algorithmus. Probiere ein anderes Encoding.

### Angriffe auf Hash-Algorithmen
Ein großes Problem entsteht für viele der Anwendungen, die wir oben genannt haben, wenn zwei Datenpakete auf denselben Hashwert zeigen können: Dann kann man sich entweder mit einem falschen Passwort anmelden oder eine falsche Datei einschleusen. Zwei Werte, die auf denselben Wert gehasst werden, nennt man eine *Kollision*. Es ist ein maßgebliches Qualitätskriterium von Hash-Algorithmen, wie lange es dauert, eine Kollision zu berechnen.

> Recherchiere auf Google, wie lange es theoretisch dauert, in SHA256 eine Kollision zu berechnen.

> Arbeitet zu zweit. Erstellt eine Datei „test.txt“ und eine Datei „test2.txt“ mit zuerst gleichem Inhalt. Ihr könnt sie öffnen mit `using (IOStream stream = File.OpenRead(„test.txt“))`. Erstellt ein Programm, welches die beiden Programme öffnet und deren Hashes vergleicht. (Tipp: `.ComputeHash()` akzeptiert auch einen Stream als Input).